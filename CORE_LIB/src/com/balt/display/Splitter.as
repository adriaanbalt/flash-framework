package com.balt.display {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.geom.Matrix;	import flash.geom.Rectangle;		public class Splitter 	{		private var _clipWidth : Number ;		private var _clipHeight : Number;		private var _listClips : Array ;		private var _width : Number;		private var _height : Number;		private var _gridDivX : uint;		private var _gridDivY : uint;		//does it return an array of bitmapData or Bitmap objects		private var _returnBitmapData : Boolean = false;		//the source of the splicing		private var _source : DisplayObject ;		//the target of the splicing		private var _target : DisplayObjectContainer ;		public function Splitter(param_source : DisplayObject,param_target : DisplayObjectContainer = null)		{			_source = param_source;			_target = param_target;			_listClips = [];		}		//split a displayObject into several sprites		public function split(param_splitNumber : uint = 10,param_returnBitmapData : Boolean = false) : Array		{										_returnBitmapData = param_returnBitmapData;											_gridDivX = param_splitNumber;			_gridDivY = param_splitNumber;			_width = _source.width;			_height = _source.height;			_clipWidth = Math.round(_source.width / _gridDivX);			_clipHeight = Math.round(_source.height / _gridDivY);											splitting();										return _listClips;		}		public function splitHorizontally(param_splitSliceSize : uint = 10,param_returnBitmapData : Boolean = false) : Array		{						_returnBitmapData = param_returnBitmapData;				 			_width = _source.width;			_height = _source.height;			_clipWidth = _width;			_clipHeight = param_splitSliceSize;											_gridDivX = 1 ;			_gridDivY = Math.ceil(_height / _clipHeight);							splitting();										return listClips;		}		public function splitBySliceSize(param_splitSliceSize : uint = 10,param_returnBitmapData : Boolean = false) : Array		{														_returnBitmapData = param_returnBitmapData;				 			_width = _source.width;			_height = _source.height;			_clipWidth = param_splitSliceSize;			_clipHeight = param_splitSliceSize;									_gridDivX = Math.ceil(_width / _clipWidth);			_gridDivY = Math.ceil(_height / _clipHeight);											splitting();										return listClips;		}		private function splitting() : void		{			// removae all previous clips			removeAllClips();						var bounds : Rectangle = _source.getBounds(_source);			for (var i : uint = 0;i < _gridDivX;i++) 			{									for (var  j : uint = 0;j < _gridDivY;j++) 				{										var translateMatrix : Matrix = new Matrix();					translateMatrix.translate(-bounds.x + i * -_clipWidth, -bounds.y + -j * _clipHeight);										var cutBitmapData : BitmapData = new BitmapData(_clipWidth, _clipHeight, true, 0x00000000);					cutBitmapData.draw(_source, translateMatrix);										//send the result as bitmap by default by can specify to send bitmapdata only					if(_returnBitmapData != true)					{						var newClip : Bitmap = new Bitmap(cutBitmapData);						if(_target == null)							_source.parent.addChild(newClip);						else 						{							_target.addChild(newClip);						}												//put the clip at its original position						newClip.x = _source.x + bounds.x + i * _clipWidth;						newClip.y = _source.y + bounds.y + j * _clipHeight;																		_listClips.push(newClip);					} else 					{											_listClips.push(cutBitmapData);					}				}			}		}				public function removeAllClips():void		{			if( _listClips )			{				for (var i : Number = 0; i < _listClips.length; i++) {					var currentClip : Bitmap = _listClips[i];					if( currentClip && currentClip.parent )					{						currentClip.parent.removeChild(currentClip);					}				}			}			_listClips = new Array();		}		public function get clipHeight() : Number		{			return _clipHeight;		}		public function get clipWidth() : Number		{			return _clipWidth;		}		public function get listClips() : Array		{			return _listClips;		}		public function get gridDivX() : uint		{			return _gridDivX;		}		public function get gridDivY() : uint		{			return _gridDivY;		}		public function get width() : Number		{			return _width;		}		public function get height() : Number		{			return _height;		}	}}
package com.balt.display.graphics{	import flash.display.MovieClip;	import flash.events.Event;	import flash.filters.BlurFilter;	import flash.utils.getDefinitionByName;		/**	* Simple class for creating randomized falling snowflakes 	* 	* @example	* var targetClip:* = this;<br>	* var areaWidth:Number = 600;<br>	* var areaHeight:Number = 300;<br>	* var visibleAreaHeight:Number = 100;<br>	* var maxFlakeAlpha:Number = 70;<br>	* var maxFlakeBlur:Number = 10;<br>	* var maxFlakeSize:Number = 50;<br>	* var minFlakeSize:Number = 35;<br>	* var flakeRotationRate:Number = 4;<br>	* var flakeFallRate:Number = 15;<br>	* var flakedriftRate:Number = 12;<br>	* var numOfFlakes:Number = 60;<br><br>	* var snowFlakes:Snowflakes = new Snowflakes( targetClip, areaWidth, areaHeight, visibleAreaHeight, maxFlakeAlpha, maxFlakeBlur, maxFlakeSize, minFlakeSize, flakeRotationRate, flakeFallRate, flakedriftRate, numOfFlakes, "SnowFlake", "BasicSnowFlake");	*/	public class Snowflakes extends MovieClip	{		private var _flakeProperties:Array = new Array();		private var _targetWidth:Number;		private var _targetHeight:Number;		private var _targetFallVisibility:Number;		private var _maxSnowAlpha:Number;		private var _maxSnowBlur:Number;		private var _maxSnowSize:Number;		private var _minSnowSize:Number;		private var _numSnowFlakes:Number;		private var _rotationRate:Number;		private var _fallRate:Number;		private var _driftRate:Number;				private var _targetClip:*;		private var _flake:MovieClip;		private var _descent:Number;		private var _wind:Number;		private var _alpha:Number;				/**		* Initiates randomized snowfall in the display area of your choice.		* 		* @param targetClip target movieclip to display snowflakes.		* @param targetWidth width of snowflake display area		* @param targetHeight height of snowflake display area		* @param targetFallVisibility height beyond which snowflakes start fading		* @param maxSnowAlpha maximum alpha for all snowflakes		* @param maxSnowBlur maximum blur for all snowflakes (cpu intensive)		* @param maxSnowSize maximum pixel size of all snowflakes		* @param minSnowSize minimum pixel size of all snowflakes		* @param rotationRate base rotation rate for each snowflake		* @param fallRate base falling rate for each snowflake		* @param driftRate base drifting rate for each snowflake		* @param numSnowFlakes number of total snowflakes		* @param ...snowFlakeObjects array of snowflake symbol library classes		*/				public function Snowflakes(targetClip:*, targetWidth:Number, targetHeight:Number, targetFallVisibility:Number, maxSnowAlpha:Number, maxSnowBlur:Number, maxSnowSize:Number, minSnowSize:Number, rotationRate:Number, fallRate:Number, driftRate:Number, numSnowFlakes:Number, ...snowFlakeObjects):void		{			this._targetClip = targetClip;			this._targetWidth = targetWidth;			this._targetHeight = targetHeight;			this._targetFallVisibility = targetFallVisibility;			this._maxSnowAlpha = maxSnowAlpha;			this._maxSnowBlur = maxSnowBlur;			this._maxSnowSize = maxSnowSize;			this._minSnowSize = minSnowSize;			this._numSnowFlakes = numSnowFlakes;			this._rotationRate = rotationRate;			this._fallRate = fallRate/10;			this._driftRate = driftRate/10;						for(var i:int=0; i<snowFlakeObjects.length; i++)			{				var startNum:int = this._numSnowFlakes - this._numSnowFlakes/(i+1);				var endNum:int = startNum + this._numSnowFlakes/snowFlakeObjects.length;								if( snowFlakeObjects[i] is Class ) createFlakes(startNum, endNum, snowFlakeObjects[i] );				else createFlakes(startNum, endNum, getDefinitionByName(snowFlakeObjects[i]) as Class);			}						}				/**		* Stops the snowflakes' movement over a specified number of frames.		* 		* @param frmDur number of frames until snow ceases movement.		*/				public function freezeSnow(frmDur:int):void		{			for (var i:int=0; i<this._numSnowFlakes; i++)			{				this._flakeProperties[i].descentDiv = this._flakeProperties[i].descent/frmDur;				this._flakeProperties[i].windDiv = this._flakeProperties[i].wind/frmDur;				this._flakeProperties[i].rotationDiv = this._flakeProperties[i].rotation/frmDur;			}		}				private function createFlakes(startNum:int, endNum:int, snowFlakeClass:Class):void		{			for (var i:int=startNum; i<endNum; i++)			{				//trace("Creating " + snowFlakeClass + " flake:", i);				var flakeObject:MovieClip = new snowFlakeClass();				var flakeProperties:Object = new Object();				var blurLevel:Number = this._maxSnowBlur * Math.random();								flakeObject.name = "flake"+i;				flakeObject.x = -(this._targetWidth / 2) + Math.random() * (1.5 * this._targetWidth);				flakeObject.y = -(this._targetHeight / 2) + Math.random() * (1.5 * this._targetHeight);								if( this._maxSnowAlpha > 0 ) flakeObject.alpha = ((this._maxSnowAlpha/10) + Math.random() * (this._maxSnowAlpha/5) + Math.random() * ((this._maxSnowAlpha/3)*2) ) /100;				if( this._maxSnowSize > 0 ) flakeObject.scaleX = flakeObject.scaleY = (this._minSnowSize + (Math.random() * this._maxSnowSize)) /100;				//var blurLevel:Number = (this._maxSnowBlur * flakeObject.alpha) / (this._maxSnowAlpha / 100);				if(blurLevel){ flakeObject.filters = [new BlurFilter(blurLevel, blurLevel, 1)]; }								flakeProperties.descent = 0.5 + Math.random() * this._fallRate;				flakeProperties.wind = -(this._driftRate) + Math.random() * (this._driftRate * 2);				flakeProperties.rotation = (Math.random() * this._rotationRate) - (this._rotationRate/2);				flakeProperties.alpha = flakeObject.alpha;				flakeProperties.blur = blurLevel;						this._flakeProperties.push(flakeProperties);				this._targetClip.addChild(flakeObject);			}						addEventListener(Event.ENTER_FRAME, snowFall);		}				private function snowFall(evt:Event):void		{			for (var i:int=0; i<this._numSnowFlakes; i++)			{				var curFlake:MovieClip = MovieClip(this._targetClip.getChildByName("flake"+i));								if(this._flakeProperties[i].descentDiv){ this._flakeProperties[i].descent -= this._flakeProperties[i].descentDiv; }				if(this._flakeProperties[i].windDiv){ this._flakeProperties[i].wind -= this._flakeProperties[i].windDiv; }				if(this._flakeProperties[i].rotationDiv){ this._flakeProperties[i].rotation -= this._flakeProperties[i].rotationDiv; }								if(this._flakeProperties[i].descent <= 0 && this._flakeProperties[i].wind <= 0 && this._flakeProperties[i].rotation <= 0){ removeEventListener(Event.ENTER_FRAME, snowFall); }								curFlake.y += this._flakeProperties[i].descent;				curFlake.x += this._flakeProperties[i].wind;				curFlake.rotation += this._flakeProperties[i].rotation;								if(curFlake.y > this._targetFallVisibility)				{					var fadeRatio:Number = 100 / (this._targetHeight - this._targetFallVisibility);					var fadeAlpha:Number = ((this._targetHeight - curFlake.y) * fadeRatio) /100;										if(curFlake.alpha > fadeAlpha){ curFlake.alpha = fadeAlpha; }				}				else				{					curFlake.alpha = this._flakeProperties[i].alpha;				}								if(curFlake.y > this._targetHeight + curFlake.height)				{					curFlake.y = -(curFlake.height);				}				if(curFlake.x > this._targetWidth + curFlake.height || curFlake.x < -(curFlake.height))				{					curFlake.x = -(this._targetWidth / 2) + Math.random() * (1.5 * this._targetWidth);					curFlake.y = -(curFlake.height);				}			}		}	}}
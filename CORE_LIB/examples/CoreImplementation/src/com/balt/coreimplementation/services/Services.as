package com.balt.coreimplementation.services{	import com.balt.core.address.IURLAddressManager;	import com.balt.core.address.URLAddressManager;	import com.balt.core.address.URLAddressManagerConstants;	import com.balt.core.asset.IContentManager;	import com.balt.core.asset.SiteLoader;	import com.balt.core.asset.css.StylesManager;	import com.balt.core.asset.font.FontManager;	import com.balt.core.asset.swf.AssetsManager;	import com.balt.core.init.Config;	import com.balt.core.location.ILocationManager;	import com.balt.core.location.LocationData;	import com.balt.core.location.LocationManager;	import com.balt.core.location.LocationManagerConstants;	import com.balt.core.metrics.ITracker;	import com.balt.core.metrics.Tracker;	import com.balt.core.path.IPathManager;	import com.balt.core.path.PathManager;	import com.balt.coreimplementation.data.CoreMiddleware;	import com.balt.events.GenericDataEvent;	import com.balt.loaders.BulkLoaderUtil;		import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.EventDispatcher;	public class Services extends EventDispatcher implements IServices	{		private var _pathManager:IPathManager;		private var _config:Config;				private var _siteLoader:SiteLoader;		private var _assetManager:IContentManager;		private var _fontManager:IContentManager;		//private var _stylesManager:StylesManager;					private var _middleware:CoreMiddleware;		private var _locationManager:ILocationManager;		private var _addressManager:IURLAddressManager;				private var _tracker:Tracker;				private var _configObj:Object;		private var _flashVars:Object;				private var _initialized: Boolean;				private var _xmlData:XML;				public var trackingOn:Boolean;				public function Services() {}				public function initialize ( mainTimeline:DisplayObjectContainer, configObj:Object, swfPath:String ):void		{				this._initialized = true;			this._configObj = configObj;			this._flashVars = mainTimeline.root.loaderInfo.parameters;			// pathmanager			this._pathManager = new PathManager( mainTimeline, swfPath );						// set configuration			this._config = new Config( mainTimeline, configObj, this._pathManager.getRootPath() );			this._config.addEventListener( Config.ON_INIT, createMainServices );			this._config.addEventListener( Config.ON_ERROR, createMainServices );		}						private function createMainServices( evt:Event ):void		{			this._config.removeEventListener( Config.ON_INIT, createMainServices );			this._config.removeEventListener( Config.ON_ERROR, createMainServices );						this.dispatchEvent( new Event ( ServicesConstants.ON_INIT ) );						// update pathmanager paths			this._pathManager.updatePaths( this._config.dataObj.sitePaths );			// data middleware 			this._middleware = new CoreMiddleware( );			this._middleware.initialize();			// content managers			this._siteLoader = new SiteLoader( this._config.dataObj.depotConfig, this._pathManager );			this._siteLoader.addEventListener( SiteLoader.PROGRESS_EVENT, siteLoaderProgress );			this._siteLoader.addEventListener( SiteLoader.ON_COMPLETE, onServicesComplete );						if( this._siteLoader.assetPaths.length )			{				this._assetManager = new AssetsManager( this._siteLoader );				this._assetManager.addEventListener( BulkLoaderUtil.START_EVENT, _siteLoader.openEvent );				this._assetManager.addEventListener( BulkLoaderUtil.PROGRESS_EVENT, _siteLoader.progressEvent );				this._assetManager.load( this._siteLoader.assetPaths );			}						if( this._siteLoader.fontPaths.length )			{				this._fontManager = new AssetsManager( this._siteLoader );				this._fontManager.addEventListener( BulkLoaderUtil.START_EVENT, _siteLoader.openEvent );				this._fontManager.addEventListener( BulkLoaderUtil.PROGRESS_EVENT, _siteLoader.progressEvent );				this._fontManager.load( this._siteLoader.fontPaths );				}								if( this._siteLoader.cssPaths.length )			{				//this._stylesManager = new StylesManager( this._siteLoader );				//this._stylesManager.addEventListener( BulkLoaderUtil.START_EVENT, _siteLoader.openEvent );				//this._stylesManager.addEventListener( BulkLoaderUtil.PROGRESS_EVENT, _siteLoader.progressEvent );				//this._stylesManager.load( this._siteLoader.cssPaths );			}						// location			this._locationManager = new LocationManager( );			this._locationManager.addEventListener ( LocationManagerConstants.EVENT_ON_LOCATION_CHANGE, onLocationChange );			this._locationManager.addEventListener ( LocationManagerConstants.EVENT_ON_ROOT_LOCATION_CHANGE, onLocationGetRootLocation );			// *** TODO: errorService/debugService for locations ************************************************************************						createAuxServices();		}				private function siteLoaderProgress( $e:GenericDataEvent ):void		{			// send : $e.data			// to : visual preloader		}				private function createAuxServices():void		{			// TODO: TOGGLES			// TODO: incorporate FacebookService, etc.				}				public function getFlashVars():Object		{			if (_flashVars)			{				return _flashVars;			}			else return {};		}				public function getAssetManager():IContentManager		{			return this._assetManager;		}		public function getFontManager():IContentManager		{			return this._fontManager;		}				/*		public function getStylesManager():StylesManager		{			return this._stylesManager;		}		*/		public function getTracker():ITracker		{			if( !this._tracker ) this._tracker = new Tracker( "" );			return this._tracker;		}				public function getLocationManager():ILocationManager		{			return this._locationManager;		}				public function getPathManager():IPathManager		{			return this._pathManager;		}						public function getURLAddress():IURLAddressManager		{			return this._addressManager;		}				public function getMiddleware():CoreMiddleware		{			// middleware			if(!_middleware)			{				this._middleware = new CoreMiddleware( );				this._middleware.initialize();			}			return this._middleware;		}				public function onLocationGetRootLocation ( p_event:Event ):void		{			// location manager			_locationManager.removeEventListener( LocationManagerConstants.EVENT_ON_ROOT_LOCATION_CHANGE, onLocationGetRootLocation );			_addressManager = new URLAddressManager();			_addressManager.addEventListener ( URLAddressManagerConstants.ON_CHANGE_LOCATION, onAddressChange );		}						private function onLocationChange ( evt:Event ):void		{			var str:String =  LocationManager( evt.target ).getCurrentLocationData().locationArray.join("/");			_addressManager.setCurrentLocation( str );		}				private function onAddressChange ( evt:Event ):void		{			var addressArray:Array = IURLAddressManager( evt.target ).getCurrentLocation();			var locationData:LocationData;						if ( addressArray.length > 0 )			{				locationData = new LocationData ( IURLAddressManager( evt.target ).getCurrentLocation() );			}			else			{				locationData = new LocationData ( [ ServicesConstants.ROOT_LOCATION_ID ] );			}						_locationManager.changeLocation ( locationData );		}		private function onServicesComplete( evt:Event ):void		{			this.dispatchEvent( new Event ( ServicesConstants.ON_COMPLETE ) );		}	}}
package com.balt.coreimplementation.nav {	import com.balt.core.location.LocationConstants;	import com.balt.core.location.LocationData;	import com.balt.core.uilib.IUILibrary;	import com.balt.coreimplementation.data.StorageConst;	import com.balt.coreimplementation.data.dataInterface.INavStorage;	import com.balt.coreimplementation.services.ServicesConstants;		import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.navigateToURL;	/**	 * @author adriaan scholvinck	 */	public class Navigation extends Sprite implements INavigation	{				public var nav_arr : Array;		private var storage : INavStorage;				private var xposition : Number = 0;		private var offset : Number = 1;				private var nav : Sprite;		private var bg : Sprite;				public function Navigation()		{			this.alpha = 0;			this.visible = false;			this.addEventListener( Event.ADDED_TO_STAGE, init );		}		// public		public function init( $e : Event = null ) : void {			this.removeEventListener( Event.ADDED_TO_STAGE, init );			var lib:IUILibrary = ServicesConstants.getServices().getAssetManager().getLibrary();			bg = lib.getLibraryAsset( "navbar_top_bg" );			this.addChild( bg );						nav = new Sprite();			this.addChild( nav );			nav_arr = new Array();						storage = ServicesConstants.getServices().getMiddleware().getNavStorage();			storage.loadData( StorageConst.NAV_XML_PATH );			storage.addEventListener(StorageConst.EVENT_ON_DATA_LOADED, dataLoadComplete );			}				public function stageResize( $e : Event = null ) : void {//			bg.x = 296;//			bg.width = ViewConstants.SITE_WIDTH - 443;		}				public function alignment() : void {			// resizes all of the tabs		}				public function update( $sectionid : Array ) : void {			this.visible = true;			for ( var i : Number = 0; i < nav_arr.length; i++ ){				if ( nav_arr[i].link.indexOf( $sectionid[0] ) == -1 ) {					nav_arr[i].enable();				} else {					nav_arr[i].disable();				}			}						stageResize();		}// private				private function dataLoadComplete( $event : Event ) : void {			storage.removeEventListener(StorageConst.EVENT_ON_DATA_LOADED, dataLoadComplete );						for each(var button:XML in storage.getXMLData().navigation.button)			{				addButton(button)			}						this.dispatchEvent( new Event ( LocationConstants.EVENT_ON_INIT ) );		}		private function addButton( $dataobj : XML ) : void {			//trace(this,'CREATED NAV BUTTON')			/* var tnb : NavButton= new NavButton( $dataobj );			tnb.addEventListener( NavButton.DOWN, updateSelection );			tnb.x = xposition;			//xposition += Math.round( tnb.hit.width + offset );			nav_arr.push( tnb );			nav.addChild( tnb );			tnb.buttonMode = true; 			stageResize();*/		}				private function updateSelection( $event : Event ) : void {			var tnb : * = $event.target;			if ( tnb.link.indexOf( "http" ) != -1 ) {				var request : URLRequest = new URLRequest( tnb.link );				navigateToURL( request, "_self" );			} else {				var newLocation : Array = new Array();				if ( tnb.link.indexOf(",") ) {					newLocation = tnb.link.split(",");				} else {					newLocation = new Array( tnb.link );				}				update( tnb.id );				var locationData : LocationData = new LocationData(newLocation);				ServicesConstants.getServices().getLocationManager().changeLocation( locationData );			}		}	}}